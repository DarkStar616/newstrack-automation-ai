I’ve added my secrets already in Replit:

GOOGLE_API_KEY = valid key from Google AI Studio

GEMINI_MODEL = gemini-1.5-flash

SEARCH_MODE = shallow (allowed: off | test | shallow | deep)

RECENCY_WINDOW_MONTHS = 3

SEARCH_PROVIDER = google

SEARCH_TEST_MODE = false

Keep any old Perplexity vars but do not use them

Please implement Evidence Mode with Gemini 1.5 Flash + google_search_retrieval, while preserving all prior functionality and schemas. I previously ran your Perplexity prompt; you must replace or bypass any Perplexity paths and make Google the active provider without breaking test mode or off mode. Make surgical changes only.

Objectives

Search provider switch with clean abstraction

Update or create src/utils/search_client.py so that SEARCH_PROVIDER=google uses Gemini 1.5 Flash with tools=[{"google_search_retrieval": {}}].

Continue to support SEARCH_MODE in {off, test, shallow, deep}.

Map result counts by mode: off→0, test→2 (deterministic fakes), shallow→3, deep→6.

Respect RECENCY_WINDOW_MONTHS (default 18 if unset). Pass this instruction in the prompt to bias results to last N months.

Keep existing SQLite cache (results/cache.sqlite) working with the key (term, window_months) and 14-day TTL. Add a provider column if needed to avoid collisions.

If SEARCH_PROVIDER!=google, short-circuit to current behavior (Perplexity code may remain but is NOT used).

Gemini client module

Add src/utils/gemini_client.py that wraps google-generativeai. It should:

Read GOOGLE_API_KEY and GEMINI_MODEL envs.

Create a GenerativeModel with tools=[{"google_search_retrieval": {}}].

Provide a function evidence_for_keyword(term:str, recency_months:int, max_results:int) -> list[dict] that returns a normalized list of evidence dicts:
{"provider":"google","url":"...","title":"...","snippet":"...","published_date":"YYYY-MM-DD"}
Use response_mime_type="application/json" and instruct model to return strict JSON only. If the model returns text, parse JSON safely.

Handle timeouts, retries, and fallbacks gracefully. On failure, return empty list.

Wire Evidence Mode into Step 3 only

In src/services/newstrack_service.py (or equivalent service), modify drop logic to:

If SEARCH_MODE=="off" → keep current LLM-only behavior.

Else (test|shallow|deep): for each keyword, call the Google evidence search through the search_client and build an evidence pack.

Call the existing LLM decisioner (or current Step-3 logic) with a strict JSON schema:

[
  {"keyword":"...", "decision":"keep"|"drop", "reason":"...", "evidence_used":[0,1,...]}
]


The indices must reference the provided evidence list for that keyword.

After applying decisions, run existing guardrails (dedupe, isolation, completeness) unchanged.

Return the same structure as before plus:

evidence_refs at step level and echoed in final_result.

All new fields must be additive. Do NOT remove or rename existing fields.

Routes & request params

In src/routes/newstrack.py, accept optional request fields: search_mode, recency_window_months, max_results_per_keyword. Thread these into the service; default to env values if omitted.

Ensure /api/drop and /api/process-all include evidence_refs in responses when search is on.

Keep /api/categorize and /api/expand unchanged except for pass-through of new query params (not required to use them).

Audit & manifest

Extend src/utils/audit.py to persist evidence metrics for drop/process-all JSONL entries:

Include evidence_refs in each entry (compact form).

Update manifest.json totals:

total_keywords_with_evidence

total_evidence_items

total_keywords_dropped_with_evidence

total_keywords_dropped_no_evidence

Record search_mode and recency_window_months per batch

Maintain backward compatibility with older manifests that don’t have these fields.

Keep guardrails intact

Do not change the logic of dedupe, completeness, and cross-category isolation. Run them after evidence-based decisions exactly as today.

Keep the existing test mode for the LLM (LLM_TEST_MODE) unchanged. When SEARCH_TEST_MODE=true, stub evidence must be deterministic and require no network.

Requirements & startup logs

Ensure requirements.txt includes google-generativeai, httpx, python-dateutil.

On app start, log the active provider and mode, e.g.
Search provider=google, mode=shallow, window=3 months, model=gemini-1.5-flash.

Acceptance tests (run these for me)
Use my public URL env var $REPLIT_URL if it exists; otherwise use the detected repl URL.

A. Health

curl -s $REPLIT_URL/api/healthz
curl -s $REPLIT_URL/api/status


B. Shallow evidence on (live)

curl -s -X POST $REPLIT_URL/api/process-all \
  -H "Content-Type: application/json" \
  -d '{"sector":"insurance","company":"TestCorp","keywords":"Santam\nFSCA regulations\nmotor insurance\nvehicle insurance","current_date":"2025-09-12","search_mode":"shallow","recency_window_months":3}'


Expect: final_result.evidence_refs present; each keyword has up to 3 citations; guardrails still populated.

C. Deep mode (live)

curl -s -X POST $REPLIT_URL/api/process-all \
  -H "Content-Type: application/json" \
  -d '{"sector":"insurance","company":"TestCorp","keywords":"MiWay\nFAIS\ncar insurance","current_date":"2025-09-12","search_mode":"deep","recency_window_months":6}'


Expect up to 6 citations per keyword; audit files include evidence metrics.

D. Off mode (no search)

curl -s -X POST $REPLIT_URL/api/process-all \
  -H "Content-Type: application/json" \
  -d '{"sector":"insurance","company":"","keywords":"Discovery Insure\nOld Mutual Insure\npolicy renewal","current_date":"2025-09-12","search_mode":"off"}'


Expect: no evidence_refs, behavior matches original.

E. Test mode (no network)
Set SEARCH_MODE=test and SEARCH_TEST_MODE=true, restart, then:

curl -s -X POST $REPLIT_URL/api/process-all \
  -H "Content-Type: application/json" \
  -d '{"sector":"insurance","company":"TestCorp","keywords":"Santam\nmotor insurance","current_date":"2025-09-12"}'


Expect: deterministic 2 fake citations per keyword; no external calls.

F. Results & manifest

latest=$(ls -1d results/* | tail -n1); echo $latest
tail -n 1 $latest/*.jsonl | sed 's/\\n/\n/g'
cat "$latest/manifest.json"


Expect: JSONL entries include evidence_refs; manifest includes the new evidence totals and current search_mode.

Non-goals / constraints

Do not break any existing schemas or UI. Only add optional request fields and additive response fields.

Keep Perplexity code in place but dormant when SEARCH_PROVIDER=google.

If anything blocks these steps, fix minimally and note the diff.

Finally, run all acceptance tests above and paste:

The exact curl outputs for B, C, D, and E,

A short bullet diff of the files you touched (paths + one-line summary per file),

A one-paragraph summary confirming guardrails still run unchanged and that evidence metrics are in the manifest.

If any environment variable is missing, print a short checklist of what I still need to add and continue with test mode so I can validate end-to-end.